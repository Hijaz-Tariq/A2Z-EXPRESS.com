generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [pgcrypto]
}

model User {
  id        String   @id @default(uuid()) @db.Uuid
  email     String?  @unique @db.VarChar(255)
  password  String?  @db.VarChar(255)
  role      Role     @default(GUEST)
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @db.Timestamptz(6)

  // Relationships
  cart          Cart?
  orders        Order[]
  pickups       Pickup[]
  agentProfile  AgentProfile?
  brokerProfile BrokerProfile?
  guestSessions GuestSession[]
  Comment       Comment[]
  Rating        Rating[]

  // Indexes
  @@index([email], name: "user_email_idx")
  @@index([role], name: "user_role_idx")
}

model GuestCheckout {
  id        String   @id @default(uuid()) @db.Uuid
  email     String   @db.VarChar(255)
  phone     String?  @db.VarChar(20)
  createdAt DateTime @default(now()) @db.Timestamptz(6)

  // Relationships
  orders  Order[]
  pickups Pickup[]

  // Indexes
  @@index([email], name: "guest_email_idx")
}

model GuestSession {
  id           String   @id @default(uuid()) @db.Uuid
  sessionToken String   @unique @default(cuid()) @db.VarChar(255)
  userId       String?  @db.Uuid
  user         User?    @relation(fields: [userId], references: [id])
  createdAt    DateTime @default(now()) @db.Timestamptz(6)
  expiresAt    DateTime @db.Timestamptz(6)

  // Relationships
  cart    Cart?
  orders  Order[]
  pickups Pickup[]

  // Indexes
  @@index([sessionToken], name: "guest_session_token_idx")
}

model Cart {
  id        String   @id @default(uuid()) @db.Uuid
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @db.Timestamptz(6)

  // Relationships (either user OR guest session must exist)
  user           User?         @relation(fields: [userId], references: [id])
  userId         String?       @db.Uuid
  guestSession   GuestSession? @relation(fields: [guestSessionId], references: [id])
  guestSessionId String?       @db.Uuid
  items          CartItem[]

  // Ensure either user or guestSession exists
  @@unique([userId], name: "user_cart_unique")
  @@unique([guestSessionId], name: "guest_cart_unique")
}

model CartItem {
  id        String   @id @default(uuid()) @db.Uuid
  cart      Cart     @relation(fields: [cartId], references: [id])
  cartId    String   @db.Uuid
  product   Product  @relation(fields: [productId], references: [id])
  productId String   @db.Uuid
  quantity  Int      @default(1)
  addedAt   DateTime @default(now()) @db.Timestamptz(6)

  // Indexes
  @@index([cartId], name: "cart_item_cart_idx")
  @@index([productId], name: "cart_item_product_idx")
}

model Category {
  id          String    @id @default(cuid())
  name        String
  description String?
  slug        String    @unique
  mainImage   String?   @db.VarChar(255)
  products    Product[]
  icon        String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model SpecialCard {
  id        String    @id @default(cuid())
  name      String
  mainImage String?  @db.VarChar(255)
  images    String[]
}

model Product {
  id            String    @id @default(uuid()) @db.Uuid
  name          String    @db.VarChar(255)
  price         Float     @db.DoublePrecision
  category      Category  @relation(fields: [categoryId], references: [id])
  categoryId    String
  description   String    @db.Text
  discountPrice Float?
  isOnSale      Boolean   @default(false)
  saleEndsAt    DateTime?
  weight        Float?    @db.DoublePrecision
  dimensions    String?   @db.VarChar(50)
  isAvailable   Boolean   @default(true)
  sku           String?   @unique @db.VarChar(100)
  searchVector  String?   @db.Text
  mainImage     String    @db.VarChar(255)
  images        String[]
  serviceType   String?   @db.VarChar(50)
  features      Json?     @db.JsonB
  averageRating Float?    @default(0.0) @db.DoublePrecision
  createdAt     DateTime  @default(now()) @db.Timestamptz(6)
  updatedAt     DateTime  @updatedAt @db.Timestamptz(6)

  // Relationships
  cartItems  CartItem[]
  orderItems OrderItem[]
  ratings    Rating[]
  comments   Comment[]

  // Indexes
  @@index([name], name: "product_name_idx")
  @@index([averageRating], name: "product_rating_idx")
}

model Rating {
  id        String   @id @default(uuid()) @db.Uuid
  value     Int      @default(0) // Typically 1-5
  product   Product  @relation(fields: [productId], references: [id])
  productId String   @db.Uuid
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.Uuid
  createdAt DateTime @default(now()) @db.Timestamptz(6)

  // Ensure one rating per user per product
  @@unique([userId, productId], name: "user_product_rating_unique")
}

model Comment {
  id        String   @id @default(uuid()) @db.Uuid
  content   String   @db.Text
  product   Product  @relation(fields: [productId], references: [id])
  productId String   @db.Uuid
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.Uuid
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @db.Timestamptz(6)

  // Indexes
  @@index([productId], name: "comment_product_idx")
  @@index([userId], name: "comment_user_idx")
}

model Order {
  id              String      @id @default(uuid()) @db.Uuid
  status          OrderStatus @default(PENDING)
  total           Float       @db.DoublePrecision
  shippingCost    Float       @db.DoublePrecision
  trackingNumber  String?     @db.VarChar(100)
  shippingAddress Json        @db.JsonB
  createdAt       DateTime    @default(now()) @db.Timestamptz(6)
  updatedAt       DateTime    @updatedAt @db.Timestamptz(6)

  // Relationships
  user           User?             @relation(fields: [userId], references: [id])
  userId         String?           @db.Uuid
  guest          GuestCheckout?    @relation(fields: [guestId], references: [id])
  guestId        String?           @db.Uuid
  broker         BrokerProfile?    @relation(fields: [brokerId], references: [id])
  brokerId       String?           @db.Uuid
  guestSession   GuestSession?     @relation(fields: [guestSessionId], references: [id])
  guestSessionId String?           @db.Uuid
  items          OrderItem[]
  tracking       ShippingTracking?

  // Indexes
  @@index([userId], name: "order_user_idx")
  @@index([guestId], name: "order_guest_idx")
  @@index([brokerId], name: "order_broker_idx")
  @@index([guestSessionId], name: "order_guest_session_idx")
  @@index([status], name: "order_status_idx")
  @@index([createdAt], name: "order_created_at_idx")
}

model OrderItem {
  id        String  @id @default(uuid()) @db.Uuid
  order     Order   @relation(fields: [orderId], references: [id])
  orderId   String  @db.Uuid
  product   Product @relation(fields: [productId], references: [id])
  productId String  @db.Uuid
  quantity  Int     @default(1)
  price     Float   @db.DoublePrecision // Price at time of purchase

  // Indexes
  @@index([orderId], name: "order_item_order_idx")
  @@index([productId], name: "order_item_product_idx")
}

model Pickup {
  id        String       @id @default(uuid()) @db.Uuid
  date      DateTime     @db.Timestamptz(6)
  address   Json         @db.JsonB
  status    PickupStatus @default(PENDING)
  weight    Float?       @db.DoublePrecision // in kg
  createdAt DateTime     @default(now()) @db.Timestamptz(6)

  // Relationships
  customer       User?             @relation(fields: [customerId], references: [id])
  customerId     String?           @db.Uuid
  guest          GuestCheckout?    @relation(fields: [guestId], references: [id])
  guestId        String?           @db.Uuid
  broker         BrokerProfile?    @relation(fields: [brokerId], references: [id])
  brokerId       String?           @db.Uuid
  guestSession   GuestSession?     @relation(fields: [guestSessionId], references: [id])
  guestSessionId String?           @db.Uuid
  tracking       ShippingTracking?

  // Indexes
  @@index([customerId], name: "pickup_customer_idx")
  @@index([guestId], name: "pickup_guest_idx")
  @@index([brokerId], name: "pickup_broker_idx")
  @@index([guestSessionId], name: "pickup_guest_session_idx")
  @@index([status], name: "pickup_status_idx")
  @@index([date], name: "pickup_date_idx")
}

model ShippingTracking {
  id                String         @id @default(uuid()) @db.Uuid
  trackingNumber    String         @unique @db.VarChar(100)
  carrier           String         @db.VarChar(100)
  status            ShippingStatus @default(PENDING)
  estimatedDelivery DateTime?      @db.Timestamptz(6)
  createdAt         DateTime       @default(now()) @db.Timestamptz(6)
  updatedAt         DateTime       @updatedAt @db.Timestamptz(6)

  // Relationships
  order    Order?          @relation(fields: [orderId], references: [id])
  orderId  String?         @unique @db.Uuid
  pickup   Pickup?         @relation(fields: [pickupId], references: [id])
  pickupId String?         @unique @db.Uuid
  events   TrackingEvent[]

  // Indexes
  @@index([orderId], name: "tracking_order_idx")
  @@index([pickupId], name: "tracking_pickup_idx")
  @@index([status], name: "tracking_status_idx")
}

model TrackingEvent {
  id         String           @id @default(uuid()) @db.Uuid
  tracking   ShippingTracking @relation(fields: [trackingId], references: [id])
  trackingId String           @db.Uuid
  eventType  String           @db.VarChar(100)
  location   String?          @db.VarChar(255)
  details    String?          @db.Text
  occurredAt DateTime         @default(now()) @db.Timestamptz(6)

  // Indexes
  @@index([trackingId], name: "event_tracking_idx")
  @@index([occurredAt], name: "event_time_idx")
}

model AgentProfile {
  id            String   @id @default(uuid()) @db.Uuid
  companyName   String?  @db.VarChar(255)
  licenseNumber String?  @db.VarChar(100)
  contactPhone  String   @db.VarChar(20)
  locations     Json?    @db.JsonB
  rating        Float?   @db.DoublePrecision
  bio           String?  @db.Text
  isVerified    Boolean  @default(false)
  createdAt     DateTime @default(now()) @db.Timestamptz(6)

  // Relationships
  user   User   @relation(fields: [userId], references: [id])
  userId String @unique @db.Uuid

  // Indexes
  @@index([userId], name: "agent_user_idx")
  @@index([isVerified], name: "agent_verified_idx")
}

model BrokerProfile {
  id            String   @id @default(uuid()) @db.Uuid
  companyName   String   @db.VarChar(255)
  licenseNumber String   @db.VarChar(100)
  contactPhone  String   @db.VarChar(20)
  services      Json?    @db.JsonB
  coverage      Json?    @db.JsonB
  rating        Float?   @db.DoublePrecision
  isVerified    Boolean  @default(false)
  createdAt     DateTime @default(now()) @db.Timestamptz(6)
  updatedAt     DateTime @updatedAt @db.Timestamptz(6)

  // Relationships
  user    User     @relation(fields: [userId], references: [id])
  userId  String   @unique @db.Uuid
  orders  Order[]
  pickups Pickup[]

  // Indexes
  @@index([userId], name: "broker_user_idx")
  @@index([isVerified], name: "broker_verified_idx")
  @@index([rating], name: "broker_rating_idx")
}

enum ShippingStatus {
  PENDING
  PROCESSING
  IN_TRANSIT
  OUT_FOR_DELIVERY
  DELIVERED
  RETURNED
  FAILED_ATTEMPT
  CUSTOMS_HOLD
}

enum Role {
  GUEST
  CUSTOMER
  AGENT
  BROKER
  ADMIN
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  RETURNED
}

enum PickupStatus {
  PENDING
  SCHEDULED
  COMPLETED
  CANCELLED
}
